<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.Persistence.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Control.DisplayContext">
            <summary>
            Represents a method of displaying information to a user, used to attribute properties in a way that only applies to a single method of display
            </summary>
        </member>
        <member name="F:Penguin.Persistence.Abstractions.Attributes.Control.DisplayContext.None">
            <summary>
            Should not be used
            </summary>
        </member>
        <member name="F:Penguin.Persistence.Abstractions.Attributes.Control.DisplayContext.Edit">
            <summary>
            Only applies when the used is making alterations to an object. Disallowing should still show the data, but it should not be editable
            </summary>
        </member>
        <member name="F:Penguin.Persistence.Abstractions.Attributes.Control.DisplayContext.BatchEdit">
            <summary>
            Only applies when a this property is being rendered as part of editing a large list of objects
            </summary>
        </member>
        <member name="F:Penguin.Persistence.Abstractions.Attributes.Control.DisplayContext.List">
            <summary>
            Only applies when this object is being listed out as part of a group
            </summary>
        </member>
        <member name="F:Penguin.Persistence.Abstractions.Attributes.Control.DisplayContext.View">
            <summary>
            Applies to any interaction that makes this object visible
            </summary>
        </member>
        <member name="F:Penguin.Persistence.Abstractions.Attributes.Control.DisplayContext.NotInherited">
            <summary>
            Any context in which this property is not accessed through a derived class
            </summary>
        </member>
        <member name="F:Penguin.Persistence.Abstractions.Attributes.Control.DisplayContext.TemplateBinding">
            <summary>
            Any context in which this property is being bound via macros to a template (ex Email system)
            </summary>
        </member>
        <member name="F:Penguin.Persistence.Abstractions.Attributes.Control.DisplayContext.Any">
            <summary>
            Applies to all contexts
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Control.DoNotCreateAttribute">
            <summary>
            Attribute for static instances to clarify that they should not be persisted in the database
            Ex, A User representing a guest
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Control.DontAllowAttribute">
            <summary>
            Specifies that during dynamic rendering, this property should be hidden from the specified DisplayContext
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Control.DontAllowAttribute.Context">
            <summary>
            This DisplayContext(s) this attribute specifies
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Control.DontAllowAttribute.#ctor(Penguin.Persistence.Abstractions.Attributes.Control.DisplayContext)">
            <summary>
            Creates a new instance of this attribute
            </summary>
            <param name="context">The display context(s) that this property should be hidden from</param>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Control.EagerLoad">
            <summary>
            1 loads only the entity. Each additional loads one more level.
            No depth supplied is infinite until reaching a tag with a supplied depth
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Control.EagerLoad.Depth">
            <summary>
            The number of steps to travel down the object graph
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Control.EagerLoad.#ctor(System.Int32)">
            <summary>
            Creates a new instance of this attribute with the specified depth
            </summary>
            <param name="depth">The number of steps to travel down the object graph</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Control.EagerLoad.#ctor">
            <summary>
            Creates a new instance of this attribute with the specified depth
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Control.IndexAttribute">
            <summary>
            Denotes that a property should be used as the index of a class
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Control.IndexAttribute.IsUnique">
            <summary>
            True if no duplicate values should be allowed between persisted objects
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Control.IndexAttribute.#ctor(System.Boolean)">
            <summary>
            Constructs a new instance of this attribute
            </summary>
            <param name="isUnique">If true, no duplicate values should be persisted among members of this class</param>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Control.KeyAttribute">
            <summary>
            Used to identify the primary key for the object for use in database persistence
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.EntityType">
            <summary>
            Describes how this object should be treated in the context of a persistence context or serialization
            </summary>
        </member>
        <member name="F:Penguin.Persistence.Abstractions.Attributes.EntityType.Entity">
            <summary>
            This entity is a fully qualified top level object. Each relationship is important and it should have its own persistence context (Ex a user)
            </summary>
        </member>
        <member name="F:Penguin.Persistence.Abstractions.Attributes.EntityType.Link">
            <summary>
            This entity is used only to hold complex information from other entites. It does not need a persistence context, will only be accessed through relationships, and
            is only as distinct as the values of its properties (ex a weight class)
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.EntityAttribute">
            <summary>
            Describes how this object should be treated in the context of a persistence context or serialization
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.EntityAttribute.Type">
            <summary>
            What kind of entity this is
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.EntityAttribute.#ctor(Penguin.Persistence.Abstractions.Attributes.EntityType)">
            <summary>
            Constructs a new instance of this attribute
            </summary>
            <param name="type">What kind of entity this is</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.EntityAttribute.ToString">
            <summary>
            Returns the type as a string (for use in dynamic rendering paths)
            </summary>
            <returns>The type as a string</returns>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.PersistenceAttribute">
            <summary>
            The root class used to define attributes as being relevant to persistence systems. All persistence attribute classes should inherit from this and this should be used to retrieve relevant attributes from types when generating models
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Relations.ComplexTypeAttribute">
            <summary>
            Tags an entity to prefer embedding the object data within the parent object, for database saved classes
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Relations.HasManyAttribute">
            <summary>
            Denotes that this property should contain multiple references to the target type
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Relations.HasManyAttribute.TargetProperty">
            <summary>
            The property name that defines the key referenced
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Relations.HasManyAttribute.TargetType">
            <summary>
            The type of the object that this property (assumed key) references
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.HasManyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Constructs a new instance of this attribute
            </summary>
            <param name="targetProperty">The property name that defines the key referenced</param>
            <param name="targetType">The type of the object that this property (assumed key) references</param>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Relations.HasOptionalAttribute">
            <summary>
            Specifies that the property this applies to is optional
            be set
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.HasOptionalAttribute.#ctor">
            <summary>
            Constructs a new instance of this attribute
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.HasOptionalAttribute.#ctor(System.String)">
            <summary>
            Constructs a new instance of this attribute
            </summary>
            <param name="rightProperty">The optional name for the property that links back to this object</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.HasOptionalAttribute.GetRightPropertyType(System.Type)">
            <summary>
            Returns the expected type of the property that links back to this one
            </summary>
            <param name="LeftPropertyType">The type of the class containing this attribute. Its a one-to-one so it just returns this type</param>
            <returns>The type of the class containing this attribute</returns>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Relations.HasRequiredAttribute">
            <summary>
            An attribute to denote that a property should be required by the persistence system
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Relations.HasRequiredAttribute.TargetProperty">
            <summary>
            The property name that defines the key referenced
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Relations.HasRequiredAttribute.TargetType">
            <summary>
            The type of the object that this property (assumed key) references
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.HasRequiredAttribute.#ctor(System.String,System.Type)">
             <summary>
            
             </summary>
             <param name="targetProperty">The property name that defines the key referenced</param>
             <param name="targetType">The type of the object that this property (assumed key) references</param>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Relations.ManyToManyAttribute">
            <summary>
            Denotes a property as being the owning end of a Many To Many relationship
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.ManyToManyAttribute.#ctor">
            <summary>
            Creates a new instance of this attribute. All properties are inferred from usage
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.ManyToManyAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of this attribute
            </summary>
            <param name="rightProperty">The name of the property that links back to this property from the other end of the relationship</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.ManyToManyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of this attribute
            </summary>
            <param name="rightProperty">The name of the property that links back to this property from the other end of the relationship</param>
            <param name="leftKey">The name of the identifying property from this type</param>
            <param name="rightKey">The name of the identifying property from the other end of the relationship</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.ManyToManyAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of this attribute
            </summary>
            <param name="rightProperty">The name of the property that links back to this property from the other end of the relationship</param>
            <param name="tableName">The name of the table used to store this relationship</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.ManyToManyAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of this attribute
            </summary>
            <param name="rightProperty">The name of the property that links back to this property from the other end of the relationship</param>
            <param name="leftKey">The name of the identifying property from this type</param>
            <param name="rightKey">The name of the identifying property from the other end of the relationship</param>
            <param name="tableName">The name of the table used to store this relationship</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.ManyToManyAttribute.GetRightPropertyType(System.Type)">
            <summary>
            Attempts to resolve the type of the property that links back to this one
            </summary>
            <param name="LeftPropertyType">The type of this property</param>
            <returns>A collection of this type, since this is Many to Many</returns>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Relations.MapAttribute">
            <summary>
            Maps a property on one object to a property on another object for entity relations. This should be used when the mapped property is only a key
            and not an actual entity type
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.MapAttribute.#ctor(System.String)">
            <summary>
            Constructs a new instance of this attribute
            </summary>
            <param name="rightProperty">The property name on the far end of the relationship</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.MapAttribute.#ctor(System.Type,System.String)">
            <summary>
            Constructs a new instance of this attribute
            </summary>
            <param name="rightType">The type of the object that this property (assumed key) references</param>
            <param name="rightProperty">The property name that defines the key referenced</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.MapAttribute.GetRightPropertyType(System.Type)">
            <summary>
            Returns the type of the property on the other end of the relationship. This seems weird
            </summary>
            <param name="LeftPropertyType">The left property type</param>
            <returns>Gets the key type of the left property</returns>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Relations.MappedAttribute">
            <summary>
            Put on a private property to specify that it SHOULD be mapped
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Relations.End">
            <summary>
            A collection of data required to define one end of a two ended mapping
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Relations.End.Key">
            <summary>
            The primary ID for the class used for declaring mapping tables
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Relations.End.Property">
            <summary>
            The property that forms the link between the classes
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Relations.End.Type">
            <summary>
            The type of the class holding this end of the relationship
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Relations.Mapping">
            <summary>
            Contains information defining both ends of a relationship mapping
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Relations.Mapping.Left">
            <summary>
            The owner of the relationship and the class where the attribute is found
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Relations.Mapping.Right">
            <summary>
            The child of the relationship, this side does not have an attribute
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Relations.Mapping.TableName">
            <summary>
            Optional table name for generating Many-To-Many relationships
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.Mapping.#ctor">
            <summary>
            Constructs a new instance of this attribute
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Relations.MappingAttribute">
            <summary>
            The base class for any attribute that defines relationships (one-to-many, optional, ex) between entities
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Relations.MappingAttribute.SetMapping">
            <summary>
            Sets/gets the mapping data for this relationship as defined when constructed
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.MappingAttribute.GetMapping(System.Reflection.PropertyInfo)">
            <summary>
            Gets the mapping data for this relationship by attempting to fill in any undefined values
            </summary>
            <param name="leftProperty">The property on the defined end of the relationship</param>
            <returns>The filled in mapping data that may contain assumed definitions if there were unspecified properties</returns>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.MappingAttribute.GetRightPropertyType(System.Type)">
            <summary>
            If the child property referencing BACK to the parent is undefined, we assume its "obvious" (only one matching member type) and use this
            method to determine if its a collection or a single link (many to many vs many to one)
            </summary>
            <param name="LeftPropertyType"></param>
            <returns></returns>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.MappingAttribute.GetKey(System.Type)">
            <summary>
            Attempts to get the "Key" (or identifying field) for a type used for mapping
            </summary>
            <param name="type">The type to get the key for</param>
            <returns>The full name (Type.FullName + Property) for the property that should be used as a key</returns>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.MappingAttribute.GetKeyType(System.Type)">
            <summary>
            Attempts to get the type of the property being used as the key for the requested type
            </summary>
            <param name="type">The type to get the key for</param>
            <returns>The key for that property, or null if not defined</returns>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Relations.NotMappedAttribute">
            <summary>
            On classes, used to specify that the object should not be part of any database context. On properties, used to specify that the property should not be persisted
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Relations.OptionalToManyAttribute">
            <summary>
            Specifies that the property this applies to is optional, and the other end of the reference may contain a list of
            the class containing this property.
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.OptionalToManyAttribute.#ctor">
            <summary>
            Constructs a new instance of this attribute
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.OptionalToManyAttribute.#ctor(System.String)">
            <summary>
            Constructs a new instance of this attribute
            </summary>
            <param name="rightProperty">The optional name for the property that links back to this object</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.OptionalToManyAttribute.GetRightPropertyType(System.Type)">
            <summary>
            Returns the expected type of the property that links back to this one
            </summary>
            <param name="LeftPropertyType">The type containing this property</param>
            <returns>It returns an ICollection of this type since its a one-to-many relationship</returns>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Relations.OptionalToRequiredAttribute">
            <summary>
            Specifies that the property this applies to is optional, however the property linking back to this must
            be set
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.OptionalToRequiredAttribute.#ctor">
            <summary>
            Constructs a new instance of this attribute
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.OptionalToRequiredAttribute.#ctor(System.String)">
            <summary>
            Constructs a new instance of this attribute
            </summary>
            <param name="rightProperty">The optional name for the property that links back to this object</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.OptionalToRequiredAttribute.GetRightPropertyType(System.Type)">
            <summary>
            Returns the expected type of the property that links back to this one
            </summary>
            <param name="LeftPropertyType">The type of the class containing this attribute. Its a one-to-one so it just returns this type</param>
            <returns>The type of the class containing this attribute</returns>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Relations.RelationalAttribute">
            <summary>
            A base class intended to be used by any attributes used to define entity relations
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.RelationalAttribute.ToString">
            <summary>
            Returns Relations + TypeName. Used by the Dynamic rendering system to allow for routing based on entity relations
            </summary>
            <returns>Returns Relations + TypeName. Used by the Dynamic rendering system to allow for routing based on entity relations</returns>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Relations.TableAttribute">
            <summary>
            A class to denote common properties for data storage
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Relations.TableAttribute.MapInherited">
            <summary>
            For EF, whether or not to map inherited types to this collection
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Relations.TableAttribute.Name">
            <summary>
            The name that the collection should be given, or for databases, the table name
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Relations.TableAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new instance of this attribute
            </summary>
            <param name="name">The name that the collection should be given, or for databases, the table name</param>
            <param name="mapInherited">For EF, whether or not to map inherited types to this collection</param>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Rendering.DisplayAttribute">
            <summary>
            Used for defining common display properties
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Rendering.DisplayAttribute.AutoGenerateField">
            <summary>
            Should fields be created during scaffolding? Unused
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Rendering.DisplayAttribute.GroupName">
            <summary>
            The group name or method of grouping/displaying properties. Implementation independent
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Rendering.DisplayAttribute.Name">
            <summary>
            The Display Name for this property
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Rendering.DisplayAttribute.Order">
            <summary>
            The order int of this property to be used when rendering properties dynamically
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Rendering.DisplayAttribute.#ctor">
            <summary>
            Creates a new instance of this attribute
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Rendering.HtmlRenderAttribute">
            <summary>
            Attribute used to tell a dynamic rendering system that this string value should use the provided Input type when rendering to the browser
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Rendering.HtmlRenderAttribute.Type">
            <summary>
            The rendering type to use for the field
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Rendering.HtmlRenderAttribute.RenderingType">
            <summary>
            An enum representing the various HTML5 input options for a text property
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Rendering.HtmlRenderAttribute.#ctor(Penguin.Persistence.Abstractions.Attributes.Rendering.HtmlRenderAttribute.RenderingType)">
            <summary>
            Constructs a new instance of this attribute
            </summary>
            <param name="type">The HTML5 type to use when rendering the field</param>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Validation.MaxLengthAttribute">
            <summary>
            Specifies the max length of a property when persisted
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Validation.MaxLengthAttribute.Length">
            <summary>
            The max length of the property
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Validation.MaxLengthAttribute.#ctor(System.Int32)">
            <summary>
            Constructs a new instance of this attribute
            </summary>
            <param name="length">The max length of the property</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Validation.MaxLengthAttribute.#ctor">
            <summary>
            Constructs a new instance of this property with a length of Int.Max
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Validation.RangeAttribute">
            <summary>
            A range attribute stolen from MS to represent a possible range of values for a property
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Validation.RangeAttribute.Maximum">
            <summary>
            Gets the maximum value for the range
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Validation.RangeAttribute.Minimum">
            <summary>
            Gets the minimum value for the range
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Validation.RangeAttribute.OperandType">
            <summary>
            Gets the type of the <see cref="P:Penguin.Persistence.Abstractions.Attributes.Validation.RangeAttribute.Minimum"/> and <see cref="P:Penguin.Persistence.Abstractions.Attributes.Validation.RangeAttribute.Maximum"/> values (e.g. Int32, Double, or some custom type)
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Validation.RangeAttribute.#ctor">
            <summary>
            Constructs an empty instance of this attribute
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Validation.RangeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor that takes integer minimum and maximum values
            </summary>
            <param name="minimum">The minimum value, inclusive</param>
            <param name="maximum">The maximum value, inclusive</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Validation.RangeAttribute.#ctor(System.Double,System.Double)">
            <summary>
            Constructor that takes double minimum and maximum values
            </summary>
            <param name="minimum">The minimum value, inclusive</param>
            <param name="maximum">The maximum value, inclusive</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Validation.RangeAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Allows for specifying range for arbitrary types. The minimum and maximum strings will be converted to the target type.
            </summary>
            <param name="type">The type of the range parameters. Must implement IComparable.</param>
            <param name="minimum">The minimum allowable value.</param>
            <param name="maximum">The maximum allowable value.</param>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Validation.RequiredAttribute">
            <summary>
            Used to denote that this property should not be default/null when persisted
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Attributes.Validation.StringLengthAttribute">
            <summary>
            Defines a maximum string length for a property
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Attributes.Validation.StringLengthAttribute.Length">
            <summary>
            The maximum string length for the property
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Attributes.Validation.StringLengthAttribute.#ctor(System.Int32)">
            <summary>
            Constructs a new instance of this attribute
            </summary>
            <param name="length">The maximum string length for the property</param>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext`1">
            <summary>
            A interface representing a context used for persisting information to a database or other format
            </summary>
            <typeparam name="T">The type of object being specifically referenced to by this instance</typeparam>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext`1.All">
            <summary>
            This should access the underlying queriable data provider, and be overridden for persistence contexts
            that require any form of data filtering
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext`1.OfType``1">
            <summary>
            This should perform all of the same data filtering and population as All, however it should
            do all of this specific to the derived type and return the derived type as though it was a top
            level persistence context
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext`1.AddOrUpdate(`0[])">
            <summary>
            This should add a new object to the data store, or update an existing matching object
            </summary>
            <param name="o">The object(s) to add or update</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext`1.Get(System.Object[])">
            <summary>
            This should return any object with a key in the provided list
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext`1.Get(System.Object)">
            <summary>
            This should return any object with a key that matches the provided
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext">
            <summary>
            A nongeneric interface for a persistence context to allow access to data without knowing the underlying type
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext.IsValid">
            <summary>
            This should return a true if the object used to construct this persistence context has an associated data store (ex DbSet)
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext.Get(System.Object[])">
            <summary>
            This should return any object with a key in the provided list
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext.Get(System.Object)">
            <summary>
            This should return any object with a key that matches the provided
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext.Add(System.Object[])">
            <summary>
            This should add a new object to the underlying data store
            </summary>
            <param name="o">The object(s) to add to the data store</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext.BeginWrite(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            This should add the passed in IWriteContext to the list of open contexts, and enable persistence
            </summary>
            <param name="context">The IWriteContext that will be controlling this persistence instance</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext.CancelWrite">
            <summary>
            This should clear out all open object references and close the write contexts without commiting any changes
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext.Commit(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            If all WriteContexts have been deregistered, this should persist any changes to the underlying data store
            </summary>
            <param name="context">The IWriteContext that has finished making changes</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext.CommitASync(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            If all WriteContexts have been deregistered, this should persist any changes to the underlying data store in an ASYNC manner
            </summary>
            <param name="context">The IWriteContext that has finished making changes</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext.Delete(System.Object[])">
            <summary>
            This should remove objects from the underlying data store, or make them inaccessible (if deleting is not prefered)
            </summary>
            <param name="o">The object(s) to remove from the data store</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext.EndWrite(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            This should check to ensure that the IWriteContext is registered with the persistence context, remove it, and if it was the LAST open
            Write context it should persist all unsaved changes to the underlying data store
            </summary>
            <param name="context">The IWriteContext that has finished making changes</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext.GetWriteContexts">
            <summary>
            This should return an array of any IWriteContexts that are currently registered by this persistence context
            </summary>
            <returns>An array of any IWriteContexts that are currently registered by this persistence context</returns>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext.Update(System.Object[])">
            <summary>
            This should update any objects that already exist in the underlying data store
            </summary>
            <param name="o">The objects to update from the underlying data store</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext.WriteContext">
            <summary>
            This should spawn a new IWriteContext instance that is pre-registered with this persistence context
            </summary>
            <returns>A new IWriteContext instance that is pre-registered with this persistence context</returns>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Interfaces.IRepository`1">
            <summary>
            An interface intended to allow for access to a persistence context of a given type
            </summary>
            <typeparam name="T">The type of data used in the persistence context</typeparam>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Interfaces.IRepository`1.Context">
            <summary>
            The persistence context containing the data this repository accesses
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IRepository`1.OfType``1">
            <summary>
            An accessor for only derived types
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Interfaces.IRepository">
            <summary>
            A nongeneric representation of a repository allowing for access without knowing the underlying data type
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Interfaces.IRepository.All">
            <summary>
            Returns the (possibly) overridden IQueriable used to access database by the underlying persistence context
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Interfaces.IRepository.IsValid">
            <summary>
            Returns a bool indicating whether or not the underlying persistence context contains a set for storing the
            type represented by this repository
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IRepository.Add(System.Object[])">
            <summary>
            This should add a new object to the underlying data store
            </summary>
            <param name="o">The object(s) to add to the data store</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IRepository.AddOrUpdate(System.Object[])">
            <summary>
            This should add a new object to the data store, or update an existing matching object
            </summary>
            <param name="o">The object(s) to add or update</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IRepository.Commit(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            If all WriteContexts have been deregistered, this should persist any changes to the underlying data store
            </summary>
            <param name="writeContext">The IWriteContext that has finished making changes</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IRepository.CommitASync(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            If all WriteContexts have been deregistered, this should persist any changes to the underlying data store in an ASYNC manner
            </summary>
            <param name="writeContext">The IWriteContext that has finished making changes</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IRepository.Delete(System.Object[])">
            <summary>
            This should remove objects from the underlying data store, or make them inaccessible (if deleting is not prefered)
            </summary>
            <param name="o">The object(s) to remove from the data store</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IRepository.Get">
            <summary>
            Should return every object from the repository
            </summary>
            <returns>Every object from the repository</returns>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IRepository.Update(System.Object[])">
            <summary>
            This should update any objects that already exist in the underlying data store
            </summary>
            <param name="o">The objects to update from the underlying data store</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IRepository.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Allows for a "Where" call on a non generic instance by converting the provided expression tree to the implemented type
            </summary>
            <typeparam name="T">An assumed type/base for this non-generic instance of the repository</typeparam>
            <param name="predicate">The Expression to pass to the underlying IQueriable</param>
            <returns>The results of evaluating the expression against the underlying IQueriable</returns>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IRepository.WriteContext">
            <summary>
            Returns a new write context for the underlying persistence context
            </summary>
            <returns> a new write context for the underlying persistence context</returns>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Interfaces.IRepositoryI`1">
            <summary>
            An interface intended to allow for access to a persistence context of a given type
            </summary>
            <typeparam name="T">The type of data used in the persistence context</typeparam>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IRepositoryI`1.Add(`0[])">
            <summary>
            This should add a new object to the underlying data store
            </summary>
            <param name="o">The object(s) to add to the data store</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IRepositoryI`1.AddOrUpdate(`0[])">
            <summary>
            This should add a new object to the data store, or update an existing matching object
            </summary>
            <param name="o">The object(s) to add or update</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IRepositoryI`1.Delete(`0[])">
            <summary>
            This should remove objects from the underlying data store, or make them inaccessible (if deleting is not prefered)
            </summary>
            <param name="o">The object(s) to remove from the data store</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IRepositoryI`1.Update(`0[])">
            <summary>
            This should update any objects that already exist in the underlying data store
            </summary>
            <param name="o">The objects to update from the underlying data store</param>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Interfaces.IRepositoryO`1">
            <summary>
            An interface intended to allow for access to a persistence context of a given type
            </summary>
            <typeparam name="T">The type of data used in the persistence context</typeparam>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Interfaces.IRepositoryO`1.All">
            <summary>
            Returns the (possibly) overridden IQueriable used to access database by the underlying persistence context
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Interfaces.IWriteContext">
            <summary>
            A context that should be used to determine whether or not a block of code is in scope by registering itself with a PersistenceContext on creation,
            and closing out and commiting any unsaved changes on disposal
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.Interfaces.IWriteContext.CancelWrite">
            <summary>
            This should clear out all open object references and close the write contexts without commiting any changes
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Models.Base.KeyedObject">
            <summary>
            Smallest possible persistable unit, containing only a definition for a unique int key
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Models.Base.KeyedObject._Id">
            <summary>
            The default unique int Key for any objects deriving from this type
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.Models.Complex.Size">
            <summary>
            A complex 2D size representation for simplifying the data type
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Models.Complex.Size.Height">
            <summary>
            The Height of the object being represented
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.Models.Complex.Size.Width">
            <summary>
            The Width of the object being represented
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.ProviderType">
            <summary>
            Enum with the intent of simplifying identification of storage types
            </summary>
        </member>
        <member name="F:Penguin.Persistence.Abstractions.ProviderType.SQL">
            <summary>
            An MSSQL connection
            </summary>
        </member>
        <member name="F:Penguin.Persistence.Abstractions.ProviderType.SQLCE">
            <summary>
            An SQLCE connection
            </summary>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.PersistenceConnectionInfo">
            <summary>
            An injectable representation of a database connection definition, to simplify the process of ensuring that all systems use the same database connection information
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.PersistenceConnectionInfo.ConnectionString">
            <summary>
            The Raw connection string used to construct this instance
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.PersistenceConnectionInfo.ProviderName">
            <summary>
            The name of the provider type (Specifically for EF)
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.PersistenceConnectionInfo.ProviderType">
            <summary>
            An enum representation of the provider type as the prefered method of accessing the information
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceConnectionInfo.#ctor(System.String,System.String)">
            <summary>
            Constructs a new instance of this connection information
            </summary>
            <param name="connectionString">The Raw connection string used to construct this instance</param>
            <param name="providerName">The name of the provider type (Specifically for EF)</param>
        </member>
        <member name="T:Penguin.Persistence.Abstractions.PersistenceContext`1">
            <summary>
            A base class representing a context used for persisting information to a database or other format
            </summary>
            <typeparam name="T">The type of object being specifically referenced to by this instance</typeparam>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.PersistenceContext`1.All">
            <summary>
            This should access the underlying queriable data provider, and be overridden for persistence contexts
            that require any form of data filtering
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.PersistenceContext`1.ElementType">
            <summary>
            This returns the core type of the underlying IQueriable
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.PersistenceContext`1.Expression">
            <summary>
            This returns the Expression of the underlying IQueriable
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.PersistenceContext`1.IsValid">
            <summary>
            This should return a true if the object used to construct this persistence context has an associated data store (ex DbSet)
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.PersistenceContext`1.Provider">
            <summary>
            This returns the Provider of the underlying IQueriable
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceContext`1.#ctor(System.Type,System.Linq.IQueryable{`0})">
            <summary>
            Constructs a new instance of the Persistence Context
            </summary>
            <param name="t">The type of entity being stored by this context</param>
            <param name="dataSource">The IQueriable being used to retrieve instances of this object</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceContext`1.Add(System.Object[])">
            <summary>
            This should add a new object to the underlying data store
            </summary>
            <param name="o">The object(s) to add to the data store</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceContext`1.AddOrUpdate(`0[])">
            <summary>
            This should add a new object to the data store, or update an existing matching object
            </summary>
            <param name="o">The object(s) to add or update</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceContext`1.BeginWrite(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            This should add the passed in IWriteContext to the list of open contexts, and enable persistence
            </summary>
            <param name="context">The IWriteContext that will be controlling this persistence instance</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceContext`1.CancelWrite">
            <summary>
            This should clear out all open object references and close the write contexts without commiting any changes
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceContext`1.Commit(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            If all WriteContexts have been deregistered, this should persist any changes to the underlying data store
            </summary>
            <param name="context">The IWriteContext that has finished making changes</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceContext`1.CommitASync(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            If all WriteContexts have been deregistered, this should persist any changes to the underlying data store in an ASYNC manner
            </summary>
            <param name="context">The IWriteContext that has finished making changes</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceContext`1.Delete(System.Object[])">
            <summary>
            This should remove objects from the underlying data store, or make them inaccessible (if deleting is not prefered)
            </summary>
            <param name="o">The object(s) to remove from the data store</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceContext`1.EndWrite(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            This should check to ensure that the IWriteContext is registered with the persistence context, remove it, and if it was the LAST open
            Write context it should persist all unsaved changes to the underlying data store
            </summary>
            <param name="context">The IWriteContext that has finished making changes</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceContext`1.GetEnumerator">
            <summary>
            This returns the Enumerator for the underlying IQueriable
            </summary>
            <returns>The Enumerator for the underlying IQueriable</returns>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceContext`1.GetWriteContexts">
            <summary>
            This should return an array of any IWriteContexts that are currently registered by this persistence context
            </summary>
            <returns>An array of any IWriteContexts that are currently registered by this persistence context</returns>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceContext`1.OfType``1">
            <summary>
            This should return a list from the data source containing only the derived type with any applicable relations/filters
            </summary>
            <typeparam name="TDerived">A type stored in the context that is derived from the main context type</typeparam>
            <returns>An IQueriable to access this child list of objects</returns>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceContext`1.Update(System.Object[])">
            <summary>
            This should update any objects that already exist in the underlying data store
            </summary>
            <param name="o">The objects to update from the underlying data store</param>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceContext`1.WriteContext">
            <summary>
            This should spawn a new IWriteContext instance that is pre-registered with this persistence context
            </summary>
            <returns>A new IWriteContext instance that is pre-registered with this persistence context</returns>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceContext`1.Get(System.Object[])">
            <summary>
            This should return any object with a key in the provided list
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceContext`1.Get(System.Object)">
            <summary>
            This should return any object with a key that matches the provided
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceContext`1.Penguin#Persistence#Abstractions#Interfaces#IPersistenceContext#Get(System.Object[])">
            <summary>
            This should return any object with a key in the provided list
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Abstractions.PersistenceContext`1.Penguin#Persistence#Abstractions#Interfaces#IPersistenceContext#Get(System.Object)">
            <summary>
            This should return any object with a key that matches the provided
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.PersistenceContext`1.AdditionalDataSources">
            <summary>
            This should contain any additional sources for objects that are READ ONLY (ex caches)
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.PersistenceContext`1.BaseType">
            <summary>
            This returns the type of the object being persisted in this context
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Abstractions.PersistenceContext`1.PrimaryDataSource">
            <summary>
            This should return the IQuerable that accesses the primary store where data is persisted
            </summary>
        </member>
    </members>
</doc>
